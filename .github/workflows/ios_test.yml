name: 📦🚀 Build & deploy iOS app for an environment

#on:
#  workflow_call:
#    inputs:
#      environment-name:
#        required: true
#        type: string
#      environment-url:
#        required: true
#        type: string
#      short-environment-name:
#        required: true
#        type: string
#      flavor:
#        required: true
#        type: string
#      new-pubspec-version:
#        required: true
#        type: string
on:
  push:
    branches:
      - master  # Change this to the branch you want to trigger the build on (e.g., master)

jobs:
  build:
    name: 🍏📦🚀 Build & deploy iOS release
    runs-on: macos-latest
    environment: production

    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
      - name: 🔐 Install Apple certificate and provisioning profile
        env:
          P12_DISTRIBUTION_CERTIFICATE_BASE64: ${{ secrets.APPSTORE_CERT_BASE64 }}
          P12_DISTRIBUTION_CERTIFICATE_PASSWORD: ${{ secrets.APPSTORE_CERT_PASSWORD }}
          DISTRIBUTION_PROVISIONING_PROFILE_BASE64: ${{ secrets.MOBILEPROVISION_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PROVISIONING_PROFILE_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate, provisioning profile and export options from secrets
          echo -n "$P12_DISTRIBUTION_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$DISTRIBUTION_PROVISIONING_PROFILE_BASE64" | base64 --decode -o $PROVISIONING_PROFILE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_DISTRIBUTION_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PROVISIONING_PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: ⚙️ Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.7.10"
          channel: 'stable'
          cache: true
        id: flutter
#      - name: ⚙️ Setup Melos
#        uses: bluefireteam/melos-action@v2
#      - name: ⚙️ Install dependencies for all packages
#        run: melos build:pub_get:all
      - name: 🍏📦 Create iOS ${{ inputs.short-environment-name }} appbundle release
        run: |
          flutter build ipa \
            --release \
            --target lib/main.dart \
            --export-options-plist=ios/Runner/ExportOptions.plist
      - name: 🍏🚀 Deploy to App Store (Testflight)
        uses: apple-actions/upload-testflight-build@v1
        with:
          app-path: ${{ github.workspace }}/app/build/ios/ipa/flutter_ci_cd_demo.ipa
          issuer-id: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          api-key-id: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          api-private-key: ${{ secrets.APP_STORE_CONNECT_API_PRIVATE_KEY }}
      - name: 💬 Pick a random success catchphrase
        if: success()
        id: success_catchphrase
        run: |
          sentences=('🤩 AMAZING !' 'Woop woop 🎉' 'Oh wow 😮' '😎 Yeahhhh !' '📣 Amazing announcement !' '📢 Your attention please...' '👏 Great work !' '🍾 Champagne !' '🙌 High five !' '🥳 Time to celebrate !')
          arrayLength=${#sentences[@]}
          randomNumber=$(($RANDOM%$arrayLength))
          pickedSentence=${sentences[$randomNumber]}
          echo "picked_sentence=$pickedSentence" >> $GITHUB_OUTPUT