name: Android Build

on:
  push:
    branches:
      - master  # Change this to the branch you want to trigger the build on (e.g., master)

jobs:
  build:
    name: Build IOS
    runs-on: macos-latest
    environment: production

    steps:
      - name: Checkout the code
        uses: actions/checkout@v2



      # Install the Apple certificate and provisioning profile
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPSTORE_CERT_BASE64 }}
          P12_PASSWORD: ${{ secrets.APPSTORE_CERT_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.MOBILEPROVISION_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          Export_Options_BASE64: ${{ secrets.Export_Options_BASE64 }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          Export_PATH=ios\Runner\ExportOptions.plist
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
          echo -n "$Export_Options_BASE64" | base64 --decode --output $Export_PATH
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      # Install flutter
      - name: ‚öôÔ∏è Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.7.10"
          channel: 'stable'
          cache: true
        id: flutter

      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision


      # Install your project's dependencies
      - run: flutter pub get

      # Build and sign the ipa using a single flutter command
      - name: Building IPA
        run: flutter build ipa --release --export-options-plist=ios/Runner/ExportOptions.plist

      # Collect the file and upload as artifact
      - name: collect ipa artifacts
        uses: actions/upload-artifact@v2
        with:
          name: release-ipa
          # Path to the release files
          path: build/ios/ipa/*.ipa

#      - name: üçèüì¶ Create iOS ${{ inputs.short-environment-name }} appbundle release
#        run: |
#          flutter build ipa --release --export-options-plist=ios/Runner/ExportOptions.plist
#          popd


#      - name: üçèüöÄ Deploy to App Store (Testflight)
#        uses: apple-actions/upload-testflight-build@v1
#        with:
#          app-path: ${{ github.workspace }}/app/build/ios/ipa/flutter_ci_cd_demo.ipa
#          issuer-id: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
#          api-key-id: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
#          api-private-key: ${{ secrets.APP_STORE_CONNECT_API_PRIVATE_KEY }}